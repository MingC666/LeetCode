class Solution {
public:
    int longestValidParentheses(string s) {
        int open=0, close=0, result=0;
        int n = s.size();
        
        // from 0 to n , find '( ' and ')' pair
        for(int i=0; i<n; ++i)
        {
            if(s[i] =='(')
                open++;
            else
                close++;
            
            if(open == close)
            {
                int l = open+close;
                result = max(result, l);
            }    
            else if(close>open)
            {
                open = close = 0;
            }
        }
        
        // from right to left, find ')' and '(' pair
        open = close = 0;
        for(int i=n; i>=0; --i)
        {
            if(s[i] ==')')
                close++;
            else
                open++;
            
            if(open == close)
            {
                int l = open+close;
                result = max(result, l);
            }    
            else if(open>close)
            {
                open = close = 0;
            }
        }
        return result;
    }
    
    
    int solution3(string s) {
        int result = 0;
        int n = s.size();
        stack<int> st;
        
        st.push(-1);
        
        for(int i=0; i<n; ++i)
        {
            char c = s[i];
            if(c=='(')
                st.push(i);
            else
            {
                st.pop();
                if(st.empty())
                    st.push(i);
                else
                {
                    int l = i - st.top();
                    result = max(result, l);
                }
            }
        }
        return result;
    }
    int solution2(string s) {
        int result = 0;
        int n = s.size();
        vector<int> dp (n, 0);
        stack<int> st;
        if(n==0) return 0;
        
        st.push(0);
        
        for(int i=1; i<n; ++i)
        {
            if(s[i] == '(')
                st.push(i);
            else if(!st.empty() && s[st.top()]=='(')
            {
                dp[i] = 2 + dp[i-1];
                if(st.top()-1 > 0)
                {
                    dp[i] += dp[st.top()-1];
                }
                st.pop();
                result = max(result, dp[i]);
            }
        }
        
        return result;
    }
};