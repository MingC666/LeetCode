class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> subresult;
        sort(candidates.begin(), candidates.end());
        
        backtracking(0, 0, target, candidates, subresult, result);
        return result;
    }
    
    void backtracking(int index, int sum, int target, vector<int> candidates, vector<int> &sub, vector<vector<int>> &result)
    {
        if(sum==target)
        {
            result.push_back(sub);
            return;
        }
        if(sum>target)
        {
            return;
        }
        
        
        for(int i=index; i<candidates.size() && sum+candidates[i]<=target; ++i)
        {
            sum += candidates[i];
            sub.push_back(candidates[i]);
            backtracking(i, sum, target, candidates, sub, result);
            sum -= candidates[i];
            sub.pop_back();
        }
        
    }
};