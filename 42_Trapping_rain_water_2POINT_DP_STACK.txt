class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        int sum = 0;
        if(n<3) return 0;
        
        int left = 0;
        int right = n-1;
        int leftwall = height[0];           // maxheight of leftwall
        int rightwall = height[right];        // maxheight of rightwall
        while(right>left)
        {
            if(leftwall > rightwall)
            {
                sum += rightwall - height[right];
                --right;
                rightwall = max(rightwall, height[right]);
            }
            else // rightwall > leftwall
            {
                sum += leftwall - height[left];
                ++left;
                leftwall = max(leftwall, height[left]);
            }
        }
        return sum;
    }
    
    int version4(vector<int>& height) {
        int n = height.size();
        
        int sum = 0;
        int left = 0;
        int leftwall = 0;
        int rightwall = 0;
        int right = n-1;
        while(left<=right)
        {
            if(height[left] < height[right])
            {
                if(leftwall > height[left])
                    sum += leftwall - height[left];
                else
                    leftwall = height[left];
                
                left++;
            }
            else
            {
                if(rightwall>height[right])
                {
                    sum += rightwall - height[right];
                }
                else
                {
                    rightwall = height[right];
                }
                right--;
            }
        }
        return sum;
    }
    
    // STACK
    int version3(vector<int>& height) {
        int n = height.size();
        if(n < 3)
            return 0;
        
        stack<int> st;
        st.push(0);
        int sum = 0;
        
        for(int i=1; i<n; ++i)
        {
            while(!st.empty() && height[i]>height[st.top()])
            {
                int bottom = height[st.top()];  // bottom-height
                st.pop();
                if(!st.empty())
                {
                    int wall = min(height[i], height[st.top()]) - bottom;  // |_| its height = shorter height - bottom's height
                    int length = i-st.top()-1;
                    sum += length*wall;
                }
            }
            st.push(i);
        }
        return sum;
    }
    // dynamic programing
    int version2(vector<int>& height) {
        int n = height.size();
        if(n<2) return 0;
        int sum = 0;
        
        int leftlimit[n];
        int rightlimit[n];
        // leftlimit[0] = height[0];
        // for(int i=1; i<n; ++i)
        // {
        //     leftlimit[i] = max(leftlimit[i-1], height[i]);
        // }
        for(int i=0; i<n; ++i)
            leftlimit[i] = (i==0)?height[i] : max(leftlimit[i-1], height[i]);
        
        // rightlimit[n-1] = height[n-1];
        // for(int i=n-2; i>-1; --i)
        // {
        //     rightlimit[i] = max(height[i], rightlimit[i+1]);
        // }
        for(int i=n-1; i>=0; ++i)
            rightlimit[i] = (i==n-1)?height[i] : max(height[i], height[i+1]);
        
        for(int i=1; i<n-1; i++)
        {
            int water = min(leftlimit[i], rightlimit[i]) - height[i];
            if(water>0)
                sum += water;
        }
        return sum;
    }
    
    
    // brute-force
    int version1(vector<int>& height) {
        int n = height.size();
        int sum = 0;
        
        for(int i=1; i<height.size(); i++)
        {
            int left = height[i];
            int right = height[i];
            for(int l=i-1; l>=0; --l)
            {
                if(height[l]>left) 
                    left = height[l];
            }
            for(int r=i+1; r<n; ++r)
            {
                if(height[r] > right) 
                    right = height[r];
            }
            
            int h = min(left, right) - height[i];
            if(h>0)
                sum += h;
        }
        return sum;
    }
    
     int v2(vector<int>& height) {
        int n = height.size();
        int sum = 0;
        auto start = cbegin(height);
        auto end = cend(height);
        for(int i=0; i<n; ++i)
        {
            int l = *max_element(start, start+i+1);
            int r = *max_element(start+i, end);
            sum += min(l, r) - height[i];
        }
        
        return sum;
    }
};