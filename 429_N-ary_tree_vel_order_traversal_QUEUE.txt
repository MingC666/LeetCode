/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>> result;
        queue<Node*> q;
        
        if(root != nullptr)
            q.push(root);
        
        while(!q.empty())
        {
            int n = q.size();
            vector<int> sub;
            for(int i=0; i<n; i++)
            {
                Node *tempnode = q.front();
                q.pop();
                sub.push_back(tempnode->val);
                
                // checking tempnode's children
                for(auto nod:tempnode->children)
                {
                    q.push(nod);
                }
            }
            result.push_back(sub);
        }
        
        return result;
    }
};