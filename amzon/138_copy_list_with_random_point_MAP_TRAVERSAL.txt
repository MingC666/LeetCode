/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
private: 
    unordered_map<Node*, Node*> visited;
    unordered_map<Node*, Node*>::iterator it;
public:
    Node* copyRandomList(Node* head) {
        
    }
    
    
     Node* solution1(Node* head) {
        if(head == nullptr) return nullptr;
        
        it = visited.find(head);
        if(it != visited.end())
        {
            return (*it).second;
            
        }
        // else
        Node *newnode = new Node(head->val);
        visited.insert({head, newnode});
        newnode->next = copyRandomList(head->next);
        newnode->random = copyRandomList(head->random);
        return newnode;
    }
};