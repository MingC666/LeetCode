////////////////////////////////JAVA
class LRUCache {

    class Dlist
    {
        int key;
        int value;
        Dlist pre;
        Dlist next;
    }
    
    // add node after head  //
    private void addnode(Dlist node)
    {
        node.pre = head;
        node.next = head.next;
        
        head.next.pre =node;
        head.next = node;
    }
    // remove the existing node
    private void removenode(Dlist node)
    {
        Dlist pre = node.pre;
        Dlist next = node.next;
        
        pre.next = next;
        next.pre = pre;
    }
    // move node after head //
    private void movetohead(Dlist node)
    {
        removenode(node);
        addnode(node);
    }
    // delete the tail node
    private Dlist poptail()
    {
        Dlist result = tail.pre;
        removenode(result);
        return result;
    }
    
    private Map<Integer, Dlist> cache = new HashMap<>();
    private int size;
    private int capacity;
    private Dlist head, tail;
    
    public LRUCache(int capacity) {
        this.size = 0;
        this.capacity = capacity;
        
        head = new Dlist();
        
        tail = new Dlist();
        head.next = tail;
        tail.pre = head;
    }
    
    public int get(int key) {
        Dlist node = cache.get(key);
        if(node == null) return -1;
        
        movetohead(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        Dlist node = cache.get(key);
        
        if(node == null)
        {
            Dlist newnode = new Dlist();
            newnode.key = key;
            newnode.value = value;
            
            cache.put(key, newnode);
            addnode(newnode);
            
            ++size;
            
            if(size>capacity)
            {
                Dlist tail = poptail();
                cache.remove(tail.key);
                --size;
            }
        }
        else
        {
            node.value = value;
            movetohead(node);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */