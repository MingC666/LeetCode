class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> result;
        
        // sort the 'nums'
        sort(nums.begin(), nums.end());
        for(int i=0; i<n-2; ++i)
        {
            // since array is sorted, if first val>0, it wont result the sum which is equal to 0
            if(nums[i] > 0) break;
            
            // checking if the first value is duplicated
            if(i>0 && nums[i]==nums[i-1])
                continue;
            
            
            // using two point method to get the other two nums
            int left = i+1;
            int right = n-1;
            while(left < right)
            {
                int sum = nums[i]+nums[left]+nums[right];
                if(sum == 0)
                {
                    result.push_back({nums[i], nums[left], nums[right]});
                    left++; 
                    right--;
                    // need move the point to position where the new value is
                    while(left<right && nums[right]==nums[right-1]) right--;
                    while(left<right && nums[left]==nums[left+1]) left++;
                }
                else if(sum > 0)
                {
                    right--;
                }
                else
                {
                    left++;
                }
            }
        }
        
        return result;
    }
};