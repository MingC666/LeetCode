class Solution {
    private:
    vector<vector<string>> result;
public:
    vector<vector<string>> solveNQueens(int n) {
        string str(n, '.');
        vector<string> temp(n, str);
        
        backtracking(0, temp, n);
        return result;
    }
    
    void backtracking(int row, vector<string> &board, int n)
    {
        if(row == n)
        {
            result.push_back(board);
            return;
        }
        for(int col=0; col<n; ++col)
        {
            if(isValid(row, col, board, n))
            {
                board[row][col] = 'Q';
                backtracking(row+1, board, n);
                board[row][col] = '.';
            }
        }
    }
    
    bool isValid(int row, int col, vector<string> &board, int n)
    {
        // we only need check its upper col has the 'Q'
        for(int i=0; i<row; ++i)
        {
            if(board[i][col] == 'Q')
                return false;
        }
        
        // checking its diagnal
        // left
        for(int i=row-1, j=col-1; i>=0&&j>=0; --i,--j)
        {
            if(board[i][j] == 'Q')
                return false;
        }
        // right
        for(int i=row-1, j=col+1; i>=0&&j>=0; --i,++j)
        {
            if(board[i][j] == 'Q')
                return false;
        }
        
        return true;
    }
    
};