/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        stack<TreeNode*> st;
        
        TreeNode* temp = root;
        while(temp!=nullptr || !st.empty() )
        {
            // push all left children to the stack
            if(temp!=nullptr)
            {
                st.push(temp);
                temp = temp->left;
            }
            else
            {
            // add result and changing 'temp' to its right child, if its right has left children, go [if]
                temp = st.top();
                st.pop();
                result.push_back(temp->val);
                temp = temp->right;
            }
        }
        
        return result;
    }
    
    vector<int> solution1(TreeNode* root) {
        vector<int> result;
        inorder(root, result);
        
        return result;
    }
    void inorder(TreeNode* root, vector<int> &v)
    {
        if(root == nullptr) return;
        
        inorder(root->left, v);
        v.push_back(root->val);
        inorder(root->right, v);
    }
};