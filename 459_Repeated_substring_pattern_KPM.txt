class Solution {
public:
    // KMP method
    bool repeatedSubstringPattern(string s) {
        int n = s.size();
        if(n<1) return false;
        
        int next[n];
        getNext(next, s);
        if(next[n-1]!=0 && n%(n-next[n-1])==0) return true;
        return false;
    }
    void getNext(int *next, string s)
    {
        next[0] = 0;
        int j=0;
        for(int i=1; i<s.size(); i++)
        {
            while(j>0 && s[i]!=s[j])
            {
                j = next[j-1];
            }
            if(s[i] == s[j])
            {
                j++;
            }
            next[i] = j;
        }
    }
    
    
    
    bool solution3(string s) {
        string temp = s+s;
        temp.erase(temp.begin());
        temp.erase(temp.end()-1);
        if(temp.find(s) != string::npos) return true;
        return false;
    }
    
    bool solution2(string s) {
        int n = s.size();
        if(n == 1) return false;
        
        string sub = "";
        sub += s[0];                      // substring must start from index 0
        for(int i=1; i<=n/2; ++i)
        {
            // checking if sub so far can make 's'
            if(s[i] == s[0])
            {
                string temp = sub;
                while(temp.size() < n)
                {
                    temp += sub;
                }
                if(temp == s)
                    return true;
            }
            sub += s[i];
        }
        
        return false;
    }
};