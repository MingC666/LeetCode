/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> result;
        // table <tree-layer,  <# of node in the layer, accumulating sum of the layer>
        map<int, pair<int, double>> table;
        
        dfs(root, 0, table);
        for(auto it:table)
        {
            result.push_back(it.second.second / it.second.first);
        }
        return result;
    }
    void dfs(TreeNode* root, int lv, map<int, pair<int, double>> &table)
    {
        if(root == nullptr) return;
        ++table[lv].first;
        table[lv].second += root->val;
        dfs(root->left, lv+1, table);
        dfs(root->right, lv+1, table);
    }
    
    
    vector<double> solution2(TreeNode* root) {
        vector<double> result;
        queue<TreeNode*> q;
        
        if(root != nullptr)
            q.push(root);
        
        while(!q.empty())
        {
            int n = q.size();
            double sum = 0;
            for(int i=0; i<n; ++i)
            {
                TreeNode *node = q.front();
                q.pop();
                sum += node->val;
                
                if(node->left)  q.push(node->left);
                if(node->right) q.push(node->right);
            }
            result.push_back(sum/n);
        }
        
        return result;
    }
};