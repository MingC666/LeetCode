class Solution {
public:
    // dfs
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> words(wordList.begin(), wordList.end());
        unordered_set<string> tempwords;
        if(words.find(endWord) == words.end()) return 0;
        
        
        queue<string> q;
        q.push(beginWord);
        int loop = 1;
        while(!q.empty()){
            int size = q.size();
            for(int i=0; i<size; ++i)
            {
                string curword = q.front();
                q.pop();
                
                 for(int i=0; i<curword.size(); ++i)
                {
                    string temp = curword;
                    for(char c='a'; c<='z'; ++c)
                    {
                        temp[i] = c;
                        if(temp == curword)
                            continue;
                        if(temp == endWord){
                            return loop+1;
                        }
                        if(words.find(temp)!=words.end())
                        {
                            q.push(temp);
                            words.erase(temp);
                        }
                    }
                }
            }
            ++loop;
        }
        
        return 0;
    }
    
    
    // brute force M^2 * N
    int solution1(string beginWord, string endWord, vector<string>& wordList) {
        queue<string> q;
        unordered_set<string> words(wordList.begin(), wordList.end());
        if(words.find(endWord) == words.end()) return 0;
        q.push(beginWord);
        int level = 0;
        
        
        
        while(!q.empty())
        {
            int size = q.size();
            ++level;
            for(int i=0; i<size; ++i)
            {
                string temp = q.front();
                q.pop();
                if(temp==endWord) return level;
                vector<string> neighbors (getneighbors(temp));
                for(string neigh:neighbors)
                {
                    if(words.find(neigh)!=words.end())
                    {
                        words.erase(neigh);
                        q.push(neigh);
                    }
                }
            }
        }
        
        return 0;
    }
    vector<string> getneighbors(string s)
    {
        vector<string> result;
        for(int i=0; i<s.size(); ++i)
        {
            string temp = s;
            for(char c='a'; c<='z'; ++c)
            {
                temp[i] = c;
                result.push_back(temp);
            }
        }
        return result;
    }
};
