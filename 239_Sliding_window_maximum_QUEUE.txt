class Solution {
public:
    //////////////////////
    // deque:   de.front() will be the largest element of the slice window
    // when add new 'nums[]', it will deque from back all values that smaller than it.
    // when the loop start, it will deque the largest element if it is the start element of the window
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> result;
        deque<int> dq;
        
        // initialize first 'dq'
        int start = 0;
        int end = k;
        dq.push_back(nums[0]);
        for(int i=1; i<k; i++)
        {
            while(!dq.empty() && nums[i] > dq.back())
            {
                dq.pop_back();
            }
            dq.push_back(nums[i]);
        }
        result.push_back(dq.front());   
        
        // start loop from kth element to end
        for(; end<n; ++end,++start)
        {
            if(dq.front()==nums[start])
            {
                dq.pop_front();
            }
            while(!dq.empty() && nums[end] > dq.back())
            {
                dq.pop_back();
            }
            dq.push_back(nums[end]);
            
            result.push_back(dq.front());
        }
        return result;
    
    }
};