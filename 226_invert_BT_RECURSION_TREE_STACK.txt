/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // DFS using stack, and using a nullptr on the top of the node that should be processing
    TreeNode* invertTree(TreeNode* root) {
        stack<TreeNode*> st;
        if(root != nullptr)
            st.push(root);
        
        while(!st.empty())
        {
            TreeNode* node = st.top();
            if(node != nullptr)
            {
                st.pop();
                if(node->left)
                    st.push(node->left);
                if(node->right)
                    st.push(node->right);
                st.push(node);
                st.push(nullptr);
            }
            else
            {
                st.pop();
                node = st.top();
                st.pop();
                swap(node->left, node->right);
            }
        }
        return root;
    }
    
    // DFS using stack
    TreeNode* solution3(TreeNode* root) {
        stack<TreeNode*> st;
        if(root != nullptr)
            st.push(root);
        
        while(!st.empty())
        {
            TreeNode* node = st.top();
            st.pop();
            swap(node->left, node->right);
            if(node->left)
                st.push(node->left);
            if(node->right)
                st.push(node->right);
        }
        
        return root;
    }
    // RECURSION
    TreeNode* solution2(TreeNode* root) {
        if(root == nullptr) return root;
        TreeNode * temp = root->left;
        root->left = root->right;
        root->right = temp;
        
        root->left = invertTree(root->left);
        root->right = invertTree(root->right);
        
        return root;
    }
};