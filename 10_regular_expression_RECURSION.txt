
class Solution {
public:
    bool isMatch(string s, string p) {
        return backtracking(s, 0, p, 0);
    }
    bool backtracking(const string &s, int sindex, const string &p, int pindex)
    {
        if(pindex >= p.size())
        {
            return sindex == s.size();
        }
        if(pindex+1<p.size() && p[pindex+1]=='*')
        {
            if(backtracking(s, sindex, p, pindex+2))
            {
                return true;
            }
            if(sindex<s.size() && (p[pindex]=='.' || s[sindex]==p[pindex]))
            {
                return backtracking(s, sindex+1, p, pindex);
            }
        }
        else if(sindex<s.size() && (p[pindex]=='.' || s[sindex]==p[pindex]))
        {
            return backtracking(s, sindex+1, p, pindex+1);
        }
        return false;
    }
};



///////////////////////// JAVA
class Solution {
    public boolean isMatch(String s, String p) {
        return helper(s, 0, p, 0);
    }
    
    private boolean helper(String s, int s_pos, String p, int p_pos)
    {
        if(p_pos == p.length())
            return s.length()==s_pos;
        // situation where there is a '*'
        if(p_pos+1<p.length() && p.charAt(p_pos+1)=='*')
        {
            if(helper(s, s_pos, p, p_pos+2))    // '*' making 0 copy
            {
                return true;
            }
            if(s_pos<s.length() && (s.charAt(s_pos)==p.charAt(p_pos)||p.charAt(p_pos)=='.'))    // '*' making one copy
            {
                return helper(s, s_pos+1, p, p_pos);
            }
            // otherwise 
            return false;
        }
        else if(s_pos<s.length() && (s.charAt(s_pos)==p.charAt(p_pos)||p.charAt(p_pos)=='.'))
        {
            return helper(s, s_pos+1, p, p_pos+1);
        }
        // otherwise
        return false;
    }
}
