/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(subRoot == nullptr) 
            return true;
        if(root == nullptr)
            return false;
        
        // checking if subRoot = root
        if( compare(root, subRoot) )
            return true;
        
        // IF 'subRoot' is different than 'root', than checking if 'subRoot' is the same for 'root''s children
        return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);
    }
    
    bool compare(TreeNode* root, TreeNode* subRoot)
    {
        if(root==nullptr && subRoot==nullptr) return true;
        if(root==nullptr || subRoot==nullptr) return false;
        
        return ( root->val==subRoot->val && compare(root-> left,subRoot->left) && compare(root->right, subRoot->right));
    }
};