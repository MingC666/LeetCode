class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        int i=0;
        
        while(i != n)
        {
            int val = nums[i];
            if(val == 1+i)
                ++i;
            else if(val>n || val<=0 || nums[val-1]==val)
                swap(nums[i], nums[--n]);
            else
                swap(nums[i], nums[val-1]);
        }
        return i+1;
    }
    
    int solution3(vector<int>& nums) {
        int n = nums.size();
        
        // checking if 1 is present
        // and set all negative to 0
        int has1 = false;
        for(int i=0; i<n; ++i)
        {
            if(nums[i] == 1)
            {
                has1 = true;
                break;
            }
        }
        if(has1 == false)
            return 1;
        
        //
        for(int i=0; i<n; ++i)
        {
            if(nums[i]<=0 || nums[i]>n)
                nums[i] = 1;
        }
        
        for(int i=0; i<n; ++i)
        {
            int a = abs(nums[i]);
            if(a==n)
                nums[0] = -abs(nums[0]);
            else
                nums[a] = -abs(nums[a]);
        }
        
        for(int i=1; i<n; ++i)
        {
            if(nums[i] > 0)
                return i;
        }
        
        if(nums[0] > 0)
            return n;
        
        return n+1;
    }
    
    int solution1(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        
        int miss = 1;
        for(int i=0; i<n; ++i)
        {
            if(nums[i]<1)
                continue;
            if(miss == nums[i])
                miss++;
        }
        return miss;
    }
};