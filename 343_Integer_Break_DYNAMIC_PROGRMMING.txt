class Solution {
public:
    // 2-1; 
    // 3-2;
    // 4-4;
    // 5-6;
    // 6-9;
    // 7-12;
    // 8-18     [5]*3   2*3*3
    // 9-27     [6]*3
    // 10-36    [7]*3
    int integerBreak(int n) {
        int dp[n+1];
        if(n==2)
        {
            return 1;
        }
        else if(n==3)
        {
            return 2;
        }
        else if(n==4)
        {
            return 4;
        }
        else if(n==5)
        {
            return 6;
        }
        else if(n==6)
        {
            return 9;
        }
        else
        {
            dp[0] = 1;
            dp[1] = 1;
            dp[2] = 1;
            dp[3] = 2;
            dp[4] = 4;
            dp[5] = 6;
            dp[6] = 9;
        
            for(int i=7; i<=n; ++i)
            {
                dp[i] = dp[i-3]*3;
            }
        }
        
        return dp[n];
    }
    
    
    int solution2(int n) {
        int dp[n+1];
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 1;
        
        for(int i=3; i<=n; ++i)
        {
            dp[i] = 0;
            for(int j=1; j<i-1; ++j)
            {
                dp[i] = max(j*(i-j), dp[i]);
                dp[i] = max(dp[i], dp[j]*(i-j));
            }
        }
        
        return dp[n];
    }
};