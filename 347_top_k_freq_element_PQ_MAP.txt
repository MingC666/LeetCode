```
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        priority_queue<pair<int, int>> pq;
        for(int i=0; i<n; ++i)
        {
            int freq = 1;
            int val = nums[i];
            while(i+1<n && nums[i+1]==nums[i])
            {
                ++freq;
                ++i;
            }
            pq.push({freq, val});
        }
        
        //get the result
        vector<int> result;
        for(int i=0; i<k; ++i)
        {
            result.push_back(pq.top().second);
            pq.pop();
        }
        
        return result;
    }
    
    vector<int> solution1(vector<int>& nums, int k) {
        // 'freq' stored the pair <value : its frequence>
        unordered_map<int, int> freq;
        for(auto num:nums)
            freq[num]++;
        
        // using priority_queue to sort the pair, but put the frequence as the key
        priority_queue<pair<int, int>> pq;
        for(auto it:freq)
            pq.push({it.second, it.first});
        
        //get the result
        vector<int> result;
        for(int i=0; i<k; ++i)
        {
            result.push_back(pq.top().second);
            pq.pop();
        }
        
        return result;
    }
};
```