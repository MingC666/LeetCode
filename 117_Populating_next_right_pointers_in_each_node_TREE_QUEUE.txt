/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        Node *head, *dummy;
        head = root;
        
        while(head != nullptr)
        {
            dummy = new Node(0);
            Node *temp = dummy;
            while(head != nullptr)
            {
                if(head->left)
                {
                    temp->next = head->left;
                    temp = temp->next;
                }
                if(head->right)
                {
                    temp->next = head->right;
                    temp = temp->next;
                }
                head = head->next;
            }
            head = dummy->next;
        }
        return root;
    }
    
    // USING queue
    Node* USING_QUEUE(Node* root) {
        queue<Node*> q;
        if(root != nullptr) q.push(root);
        
        while(!q.empty())
        {
            int n = q.size();
            
            Node *cur;
            Node *next;
            for(int i=0; i<n; ++i)
            {
                if(0 == i)
                {
                    cur = q.front();
                    q.pop();
                }
                else
                {
                    next = q.front();
                    q.pop();
                    cur->next = next;
                    cur = next;
                }
                if(cur->left)   q.push(cur->left);
                if(cur->right)  q.push(cur->right);
            }
        }
        return root;
    }
};