/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *fast=head, *slow=head;
        
        while(fast!=nullptr && fast->next!=nullptr)
        {
            fast = fast->next->next;
            slow = slow->next;
            
            if(fast == slow)
            {
                slow = head;
                while(slow != fast)
                {
                    slow = slow->next;
                    fast = fast->next;
                }
                return slow;
            }
        }
        return nullptr;
    }
    
    
    ListNode *detectCycle02(ListNode *head) {
        set<ListNode*> visited;
        
        while(head != nullptr)
        {
            if(visited.find(head) != visited.end())
            {
                return head;
            }
            visited.insert(head);
            head = head->next;
        }
        
        return nullptr;
    }
    
    
    ListNode *detectCycle01(ListNode *head) {
        ListNode *fast=head, *slow=head;
        if(head==nullptr || head->next==nullptr) return nullptr;
        while(fast->next!=nullptr && fast->next->next!=nullptr)
        {
            fast = fast->next->next;
            slow = slow->next;
            
            if(fast == slow)
            {
                slow = head;
                while(fast != slow)
                {
                    fast = fast->next;
                    slow = slow->next;
                }
                return fast;
            }
        }
        
        return nullptr;
    }
    
    
    ListNode *detectCycle0(ListNode *head) {
        vector<ListNode*> nodes;
        ListNode *temp = head;
            
        while(temp!=nullptr)
        {
            if(find(nodes.begin(), nodes.end(), temp) !=  nodes.end())
            {
                return temp;
            }
            ListNode *newnode = temp;    
            nodes.push_back(newnode);
            temp = temp->next;
        }
        
        return temp;
    }
};