class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        while(n>0)
            nums1[m++] = nums2[--n];
        sort(nums1.begin(), nums1.end());
    }
    
    
    void solution2(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        if(n==0) return;
        
        int last = m+n-1;
        while(last>=0)
        {
            if(m==0)
            {
                nums1[last] = nums2[n-1];
                last--; n--;
            }
            else if(n==0)
            {
                return;
            }
            else if(nums1[m-1] > nums2[n-1])
            {
                nums1[last] = nums1[m-1];
                last--; m--;
            }
            else
            {
                nums1[last] = nums2[n-1];
                last--; n--;
            }
        }
    }
    
    void solution1(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        // if nums2 is empty
        if(n==0) return;
        
        // else
        // last index after meger
        int index = m+n-1;
        
        
        // insert from back to front
        while(index >= 0)
        {
            if(n==0)
            {
                for(int i=0; i<m; i++){
                    nums1[i] = nums1[i];
                }
                return;
            }
            else if(m==0)
            {
                for(int i=0; i<n; i++){
                    nums1[i] = nums2[i];
                }
                return;
                
            }
            else if(nums2[n-1] >= nums1[m-1])
            {
                nums1[index--] = nums2[n-1];
                n--;
            }
            else
            {
                nums1[index--] = nums1[m-1];
                m--;
            }
        }
    }
};