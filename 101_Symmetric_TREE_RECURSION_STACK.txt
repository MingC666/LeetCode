/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Using queue, DFS
    bool isSymmetric(TreeNode* root) {
        queue<TreeNode*> q;
        
        q.push(root->left);
        q.push(root->right);
        
        while(!q.empty())
        {
            TreeNode *right = q.front();
            q.pop();
            TreeNode *left = q.front();
            q.pop();
            
            // if symmetric are both nullptr, continue;
            if(left==nullptr && right==nullptr)
                continue;
            // situation that will cause false result
            else if(left==nullptr || right==nullptr || left->val!=right->val)
                return false;
            
            // other wise, push the symetric node into queue
                // push the outter layyer
            q.push(left->left);
            q.push(right->right);
                //push the inner layyer
            q.push(left->right);
            q.push(right->left);
        }
        return true;
    }
    
    
    // Using stack, DFS
    bool solution3(TreeNode* root) {
        stack<TreeNode*> st;
        
        st.push(root->left);
        st.push(root->right);
        
        while(!st.empty())
        {
            TreeNode *right = st.top();
            st.pop();
            TreeNode *left = st.top();
            st.pop();
            
            // if symmetric are both nullptr, continue;
            if(left==nullptr && right==nullptr)
                continue;
            // situation that will cause false result
            else if(left==nullptr || right==nullptr || left->val!=right->val)
                return false;
            
            // other wise, push the symetric node into queue
                // push the outter layyer
            st.push(left->left);
            st.push(right->right);
                //push the inner layyer
            st.push(left->right);
            st.push(right->left);
        }
        return true;
    }
    
    // Recursion
    bool solution1(TreeNode* root) {
        return helper(root->left, root->right);
    }
    
    bool helper(TreeNode *left, TreeNode *right)
    {
        if(left==nullptr && right!=nullptr)         return false;
        else if(left!=nullptr && right==nullptr)    return false;
        else if(left==nullptr && right==nullptr)    return true;
        else if(left->val != right->val)            return false;
        
        bool outlayer = helper(left->left, right->right);
        bool innerlayer = helper(left->right, right->left);
        
        return outlayer&&innerlayer;
    }
};