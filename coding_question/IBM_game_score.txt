#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'getScoreDifference' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY numSeq as parameter.
 */

int getScoreDifference(vector<int> numSeq) {
// for(auto i: numSeq) cout << i << " ,, " ;
// cout << endl << endl;
    // variables initiliazation
    int n = numSeq.size();
    int first_score = 0;            // get score of even index
    int second_score = 0;           // get score of odd index
    
    // two point method
    int count = 0;              // tracking point add to which player even-first_player, odd-second_player
    int left = 0;
    int right = n-1;
    bool using_left = true; // flag of using left of right index
    while(left <= right)
    {
        if(using_left)
        {
            cout << numSeq[left] << endl;
            if(count%2==0)
            {
                first_score += numSeq[left];
            }
            else {
                second_score += numSeq[left];
            }
            if(numSeq[left]%2==0)
                using_left = !using_left;
            left++;
        }
        else 
        {
            cout << numSeq[right] << endl;
            if(count%2==0)
            {
                first_score += numSeq[right];
            }
            else {
                second_score += numSeq[right];
            }
            if(numSeq[right]%2==0)
                using_left = !using_left;
            right--;
        }
        count++;
    }
    // travel through the que and operating corresponding operation
    // for(int i=0; i<n; ++i)
    // {
    //     // score for first_player
    //     if(i%2 == 0)
    //     {
    //         first_score += numSeq[i];
    //     }
    //     // score for second_player
    //     else        
    //     {
    //         second_score += numSeq[i];
    //     }
    //     // checking if the sub-sequence need to be reveresed only if the value is EVEN
    //     if(numSeq[i]%2==0)
    //         reverse(numSeq.begin()+i+1, numSeq.end());
        
    // }
    
    // return the result
    return first_score-second_score;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string numSeq_count_temp;
    getline(cin, numSeq_count_temp);

    int numSeq_count = stoi(ltrim(rtrim(numSeq_count_temp)));

    vector<int> numSeq(numSeq_count);

    for (int i = 0; i < numSeq_count; i++) {
        string numSeq_item_temp;
        getline(cin, numSeq_item_temp);

        int numSeq_item = stoi(ltrim(rtrim(numSeq_item_temp)));

        numSeq[i] = numSeq_item;
    }

    int result = getScoreDifference(numSeq);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
