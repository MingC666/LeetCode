class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        vector<int>result(n1, -1);
        
        unordered_map<int, int> mp;     // map stored <value, index>
        for(int i=0; i<n1; ++i)
            mp[nums1[i]] = i;
        
        // back wared, the stack from top to down is increasing-order
        stack<int> st;
        for(int i=n2-1; i>=0; --i)
        {
            while(!st.empty() && nums2[i]>=st.top())
                st.pop();
            if(!st.empty() && mp.find(nums2[i])!=mp.end())
                result[mp[nums2[i]]] = st.top();
            st.push(nums2[i]);
        }
        
        return result;
    }
    
    vector<int> version2(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        vector<int>result(n1, -1);
        
        unordered_map<int, int> mp;     // map stored <value, index>
        for(int i=0; i<n1; ++i)
            mp[nums1[i]] = i;
        
        // the stack will sotre the value that not lesser than current val
        stack<int> st;
        for(int i=0; i<n2; ++i)
        {
            while(!st.empty() && nums2[i]>st.top())
            {
                if(mp.find(st.top()) != mp.end())
                    result[mp[st.top()]] = nums2[i];
                st.pop();
            }
            st.push(nums2[i]);
        }
        
        return result;
    }
    
    vector<int> version1(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        vector<int>result(n1, -1);
        
        unordered_map<int, int> mp;
        stack<int> st;
        
        for(int i=0; i<n2; ++i)
        {
            while(!st.empty() && nums2[i]>st.top())
            {
                mp[st.top()] = nums2[i];
                st.pop();
            }
            st.push(nums2[i]);
        }
        for(int i=0; i<n1; ++i)
        {
            if(mp[nums1[i]] != 0)
                result[i] = mp[nums1[i]];
        }
        
        return result;
    }
};