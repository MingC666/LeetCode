/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        int lv = depth(root);
        vector<vector<int>> result(lv, vector<int> {});
        layerProcessing(root, lv-1, result);
        return result;
    }
    void layerProcessing(TreeNode *root, int lv, vector<vector<int>> &res)
    {
        if(root == nullptr) return;
        res[lv].push_back(root->val);
        layerProcessing(root->left, lv-1, res);
        layerProcessing(root->right, lv-1, res);
    }
    
    int depth(TreeNode *root)
    {
        if(root == nullptr)
            return 0;
        else
            return max(depth(root->left), depth(root->right))+1;
    }
    
    
    vector<vector<int>> solution2(TreeNode* root) {
        vector<vector<int>> result;
        // using queue to stored each layer's nodes
        queue<TreeNode*> q;
        if(root != nullptr)
            q.push(root);
        
        
        while(!q.empty())
        {
            int n = q.size();
            vector<int> sub;
            for(int i=0; i<n; ++i)
            {
                TreeNode *node = q.front();
                q.pop();
                sub.push_back(node->val);
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            result.push_back(sub);
        }
        
        reverse(result.begin(), result.end());
        return result;
    }
};