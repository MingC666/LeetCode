class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> result;
        unordered_map<int, int> visited;  // key is #, value is index
        
        for(int i=0; i<nums.size(); i++)
        {
            // IF there are value add up to target founded
            if(visited.find(target-nums[i]) != visited.end())
            {
                return {i, visited[target-nums[i]]};
            }
            // IF the value is not match in map, add to visited
            visited[nums[i]] = i;
        }
        return {};
    }
    
    vector<int> solution1(vector<int>& nums, int target) {
        vector<int> result = nums;
        int l=0, r=nums.size()-1;
        
        sort(result.begin(), result.end());
        int num1, num2;
        while(r>l)
        {
            if(result[l]+result[r] == target)
            {
                num1 = result[l];
                num2 = result[r];
                break;
            }
            else if(result[l]+result[r] > target)
            {
                r--;
            }
            else
            {
                l++;
            }
        }
        result.clear();
        for(int i=0; i<nums.size(); i++)
        {
            if(result.size()==2) return result;
            if(nums[i]==num1 || nums[i]==num2)
            {
                result.push_back(i);
            }
        }
        
        return result;
    }
};